https://www.youtube.com/embed/H4qg9HJX_SE
https://learn.microsoft.com/ru-ru/aspnet/core/tutorials/first-web-api?view=aspnetcore-7.0&tabs=visual-studio
https://learn.microsoft.com/ru-ru/aspnet/core/tutorials/web-api-javascript?view=aspnetcore-7.0
https://learn.microsoft.com/ru-ru/shows/beginners-series-to-web-apis/
https://learn.microsoft.com/ru-ru/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-7.0&tabs=visual-studio
https://learn.microsoft.com/en-us/aspnet/web-api/overview/data/using-web-api-with-entity-framework/part-5


Веб-API ASP.Net Core
.Net 5
с поддержкой OpenAPI

--------------
Postman
для тестирования вызово API
или
Swagger

--------------
Models
персонажи
новый класс Character

класс перечисление RPG

--------------
Controllers
контроллер CharacterController
атрибут ApiController

список персонажей

--------------
[] - действие для данного ресурса
Get - только для получения данных, можно отправить id,
post - отправка объектов в сервис, на указанный ресурс, например создание персонажа, сохранение в БД
put - замена текущих представлений ресурса полезной нагрузкой запроса, обновление объектов,
например полностью изменить свойство персонажа, пепрезапись объекта
стандартное использование - отправить объект в сервис, который уже существует и обновить каждое свойство этого объекта
delete - удаление ресурса, передача id в службу через url

каждый метод для клиента нужно создать
CRUD - методы Http запроса
Create - Post
Read - Get
Update - Put
Delete - Delete

--------------
добавление нового персонажа
post отправляет json в службу(сервис), служба создает новый персонаж
CharacterController

контроллер персылает сообщения в службу и возвращает результаты клиенту
внедрение зависимостей - использование одного и того же сервиса в нескольких контроллерах
сервис ображается к БД
DTO - Data Transfer Object
объекты передачи данных - модели клиент-сервис, нет сопоставления с моделью в БД

дата создания/изменения в БД, пользователю не предоставляется
automapper сопоставляет автоматически Model-DTO

--------------
чистая архитекутра
Services - CharacterService
интерфейс ICharacterService и служба - класс персонажа CharacterService
интерфейс - методы из контроллера персонажей
служба интерфейсов добавляется к классу quick fix
конструктор
замена на метод службы 

внедрение не знает какой класс  реализации исполльзовать - нужно указать службу для внедрения в интерфейс
Startup.cs
AddScoped - область действия службы, создаем новый экземпляр службы для каждого запроса

--------------
Async
интерфейс ICharacterService
добавление Task к типу значений
класс CharacterService, контроллер CharacterController
добавление Task к типу значений и указание async метода
в контроллере await
до БД выполнение синхронно, нужно добавить структуру сущностей EntityFramework для запросов к БД

--------------
объект-оболочка
дополнительная информация
Models
класс ServiceResponce
шаблон тип данных для ответа, сообщение успешного использования

интерфейс ICharacterService, класс CharacterService
добавление ответа ServiceResponse к задаччам 
класс CharacterService
новый объект ответа службы в каждом методе
GetAll - персонажи завернуты в сервисный ответ

--------------
... продолжение в Git
Контроллер и БД

--------------
Create Data Transfer Objects (DTOs)
Создание объектов передачи данных
DTO — это объект, который определяет способ отправки данных по сети
Клиент не должен получать данные, которые сопоставляются непосредственно с таблицами базы данных
(веб-API предоставляет клиенту объекты базы данных)
библиотека, например AutoMapper, выполняет преобразование автоматически

Dtoss -> Character
создание/получение персонажа
class AddCharacterDto.cs
class GetCharacterDto.cs
класс соответствует модели, для упрощения копируем свойства
изменение контроллера и службы в соответствии с DTO
типы не совпадают - нужно сопоставить модели с DTO
AutoMapper.Extensions.Microsoft.DependencyInjection
ConfigureServices -> AddAutoMapper 
CharacterService -> ctor -> IMapper -> создать поле
сопоставление через _mapper в сервисе
необъодимо создать карту сопоставлений в профиле для каждого сопоставления, или класс для профилей
проект -> class AutoMapperProfile.cs

--------------
обновление персонажа
ICharacterService.cs
метод
Dtos -> Character -> class UpdateCharacterDto
CharacterService
реализация интерфейса, quick fix быстрые действия
CharacterController

--------------
обработка исключений в сервисе CharacterService
например существующий id
поняттное сообщение для пльзователя
CharacterController
ответ 200 , персонаж не найден -> вернуть 404

--------------
удаление персонажа
интерфейс сервисов и контроллер
quick fix метод
сервис копируем с update
контроллер с get